name: 'Build OSSIA Addon'
description: 'Builds an OSSIA score addon'
inputs:
  addon-path:
    description: 'Path to the addon source'
    required: false
    default: '.'
  build-type:
    description: 'Build type (Debug or Release)'
    required: true
  score-path:
    description: 'Path to score source (for dev builds)'
    required: false
  score-sdk-path:
    description: 'Path to score SDK (for SDK builds)'
    required: false
  ossia-sdk-path:
    description: 'Path to OSSIA SDK'
    required: true
  install-prefix:
    description: 'Installation prefix (for Release builds)'
    required: false
    default: 'install'
  additional-flags:
    description: 'Additional CMake flags'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Setup build environment
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          echo "PATH=${{ inputs.ossia-sdk-path }}/llvm/bin:$PATH" >> $GITHUB_ENV
          echo "CMAKE_COMPILER_FLAGS=-DCMAKE_C_COMPILER=${{ inputs.ossia-sdk-path }}/llvm/bin/clang.exe -DCMAKE_CXX_COMPILER=${{ inputs.ossia-sdk-path }}/llvm/bin/clang++.exe" >> $GITHUB_ENV
        elif [[ "${{ runner.os }}" == "Linux" ]]; then
          echo "PATH=${{ inputs.ossia-sdk-path }}/llvm/bin:$PATH" >> $GITHUB_ENV
          echo "CMAKE_COMPILER_FLAGS=-DCMAKE_C_COMPILER=${{ inputs.ossia-sdk-path }}/llvm/bin/clang -DCMAKE_CXX_COMPILER=${{ inputs.ossia-sdk-path }}/llvm/bin/clang++" >> $GITHUB_ENV
        else
          echo "CMAKE_COMPILER_FLAGS=" >> $GITHUB_ENV
        fi

    - name: Create build directory
      shell: bash
      run: |
        BUILD_DIR="build-${{ inputs.build-type }}"
        mkdir -p $BUILD_DIR
        echo "BUILD_DIR=$BUILD_DIR" >> $GITHUB_ENV

    - name: Configure (dev build)
      if: inputs.score-path != ''
      shell: bash
      run: |
        export PATH=$PATH:$PWD
        cmake -S ${{ inputs.addon-path }} -B ${{ env.BUILD_DIR }} \
          -DCMAKE_MODULE_PATH=$PWD/${{ inputs.score-path }}/cmake \
          -DSCORE_SOURCE_DIR=$PWD/${{ inputs.score-path }} \
          -DOSSIA_SDK=${{ inputs.ossia-sdk-path }} \
          -DCMAKE_BUILD_TYPE=${{ inputs.build-type }} \
          -DCMAKE_UNITY_BUILD=1 \
          -DCMAKE_INSTALL_PREFIX=${{ inputs.install-prefix }} \
          ${{ env.CMAKE_COMPILER_FLAGS }} \
          ${{ inputs.additional-flags }}

    - name: Configure (SDK build)
      if: inputs.score-sdk-path != ''
      shell: bash
      run: |
        export PATH=$PATH:$PWD
        echo " ! ! ! ! => " 
        echo ${{ inputs.score-sdk-path }}/lib/cmake/score
        echo "1:"
        find . -name ScoreExternalAddon.cmake
        echo "2:"
        find . -name ScoreFunctions.cmake
        echo "3:"
        find ${{ inputs.score-sdk-path }} -name ScoreExternalAddon.cmake
        echo "4:"
        find ${{ inputs.score-sdk-path }} -name ScoreFunctions.cmake
        cmake -S ${{ inputs.addon-path }} -B ${{ env.BUILD_DIR }} \
          -DCMAKE_MODULE_PATH=$PWD/${{ inputs.score-sdk-path }}/lib/cmake/score \
          -DSCORE_SDK=$PWD/${{ inputs.score-sdk-path }} \
          -DOSSIA_SDK=${{ inputs.ossia-sdk-path }} \
          -DCMAKE_BUILD_TYPE=${{ inputs.build-type }} \
          -DCMAKE_UNITY_BUILD=1 \
          -DCMAKE_INSTALL_PREFIX=${{ inputs.install-prefix }} \
          ${{ env.CMAKE_COMPILER_FLAGS }} \
          ${{ inputs.additional-flags }}

    - name: Build
      shell: bash
      run: cmake --build ${{ env.BUILD_DIR }}

    - name: Install (Release only)
      if: inputs.build-type == 'Release'
      shell: bash
      run: cmake --build ${{ env.BUILD_DIR }} --target install
